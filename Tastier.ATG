COMPILER Tastier
 
   const int // object kinds
      var = 0, proc = 1, constant = 2, scope = 3;
 
   const int // types
      undef = 0, integer = 1, boolean = 2;

   const int // sorts
      scalar = 0, array = 1;
 
   public SymbolTable tab;
   public CodeGenerator gen;
 
/*-------------------------------------------------------------------------------------------*/
 
CHARACTERS
 
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  digit = "0123456789".
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  stringCh = ANY - '"' - '\\' - cr - lf - tab.
  printableCh = '\u0020' .. '\u007e'.
 
/*-------------------------------------------------------------------------------------------*/
 
TOKENS
 
  number = digit { digit }.
  ident = letter { letter | digit }.
  string = '"' {stringCh | '\\' printableCh} '"'.
 
/*-------------------------------------------------------------------------------------------*/
 
COMMENTS FROM "//" TO lf
COMMENTS FROM "/*" TO "*/" NESTED
 
/*-------------------------------------------------------------------------------------------*/
 
IGNORE cr + lf + tab
 
/*-------------------------------------------------------------------------------------------*/
 
PRODUCTIONS
 
AddOp<out Op op>
=                        (. op = Op.ADD; .)
  ( '+'
  | '-'                  (. op = Op.SUB; .)
  )
.
 
/*-------------------------------------------------------------------------------------------*/
 
Expr<out int reg,        // load value of Expr into register
     out int type>       (. int typeR, regR; Op op; .)
  = SimExpr<out reg,
            out type>
  [ RelOp<out op>
    SimExpr<out regR,
            out typeR>   (. 
                            if (type == typeR) {
                               type = boolean; //expression is now a boolean
                               gen.RelOp(op, reg, regR);
                            }
                            else SemErr("incompatible types");
                         .)
   ]                     (. gen.ClearRegisters(); .)
.
 
/*-------------------------------------------------------------------------------------------*/
 
Primary<out int reg,     // load Primary into register
        out int type>    (. int n; Obj obj; string name; .)
=                        (.
                            type = undef;
                            reg = gen.GetRegister();
                         .)
  ( Ident<out name>      (.
                            obj = tab.Find(name); type = obj.type;
                            if (obj.kind == var){
                               if (obj.level == 0)
                                  gen.LoadGlobal(reg, obj.adr, name);
                               else
                                  gen.LoadLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                               if (type == boolean)
                               // reset Z flag in CPSR
                                  gen.ResetZ(reg);
                            }
   			    else if(obj.kind == constant){
  			       reg = gen.GetRegister();
			       gen.LoadConstant(reg, obj.constVal);
                            }

                            else SemErr("variable/constant expected");
                         .)
  
  | number               (.
                            type = integer;
                            n = Convert.ToInt32(t.val);
                            gen.LoadConstant(reg, n);
                         .)
 
  | '-'
    Primary<out reg,
            out type>     (.
                            if (type == integer)
                               gen.NegateValue(reg);
                            else SemErr("integer type expected");
                         .)
 
  | "true"               (.
                               type = boolean;
                               gen.LoadTrue(reg);
                         .)
 
  | "false"              (.
                               type = boolean;
                               gen.LoadFalse(reg);
                         .)
 
  | '('
    Expr<out reg,
         out type>
    ')'
 
  )
.
 
/*-------------------------------------------------------------------------------------------*/
 
Ident<out string name>
= ident                  (. name = t.val; .)
.
 
/*-------------------------------------------------------------------------------------------*/
 
String<out string text>
= string                  (. text = t.val; .)
.
 
/*-------------------------------------------------------------------------------------------*/
 
MulOp<out Op op>
=                        (. op = Op.MUL; .)
  ( '*'
  | ("div" | "DIV")      (. op = Op.DIV; .)
  | ("mod" | "MOD")      (. op = Op.MOD; .)
  )
.
 
/*-------------------------------------------------------------------------------------------*/
 
ProcDecl<string progName>
                         (. Obj obj; string procName; .)
= "void"
  Ident<out procName>    (.
                            obj = tab.NewObj(procName, proc, undef, scalar);
                            if (procName == "main")
                               if (tab.curLevel == 0)
                                  tab.mainPresent = true;
                               else SemErr("main not at lexic level 0");
                            tab.OpenScope();
                         .)
  '(' ')'
  '{'
     {
     VarDecl
     }
     {
     ConstantDecl
     }
     {
     ProcDecl<progName>
     }                   (.
                            if (procName == "main")
                               gen.Label("Main", "Body");
                            else {
                               gen.ProcNameComment(procName);
                               gen.Label(procName, "Body");
                            }
                         .)
     Stat { Stat }
  '}'                    (.
                            if (procName == "main") {
                               gen.StopProgram(progName);
                               gen.Enter("Main", tab.curLevel, tab.topScope.nextAdr);
                            } else {
                               gen.Return(procName);
                               gen.Enter(procName, tab.curLevel, tab.topScope.nextAdr);
                            }
                            tab.CloseScope();
                         .)
.
 
/*-------------------------------------------------------------------------------------------*/
 
RelOp<out Op op>
=                        (. op = Op.EQU; .)
  ( "="
  | '<'                  (. op = Op.LSS; .)
  | '>'                  (. op = Op.GTR; .)
  | "!="                 (. op = Op.NEQ; .)
  | "<="                 (. op = Op.LEQ; .)
  | ">="                 (. op = Op.GEQ; .)
  )
.
 
/*-------------------------------------------------------------------------------------------*/
 
//Simple expression 
SimExpr<out int reg,     //load value of SimExpr into register
        out int type>    (. int typeR, regR; Op op; .)
= Term<out reg,
       out type>
  { AddOp<out op>
    Term<out regR,
         out typeR>      (.
                            if (type == integer && typeR == integer)
                               gen.AddOp(op, reg, regR);
                            else SemErr("integer type expected");
                         .)
  }
.
 
/*-------------------------------------------------------------------------------------------*/
 
Stat                     (. int type; string name; Obj obj; int reg; .)
= Ident<out name>        (. obj = tab.Find(name);int l1, l2; l1 = 0; l2 = 0; .)
  ( ":="                 (.
                            if (obj.kind != var)
                               SemErr("cannot assign to procedure");
                         .)
                         
                         
       Expr<out reg,   
             out type>          
         
    (    ';'            (.
                            if (type == obj.type) 
                               if (obj.level == 0)
                                  gen.StoreGlobal(reg, obj.adr, name);
                               else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                        .)                                               
                        
    |   '?'            (.  //checks to see if object is boolean                         
                            if(type == boolean)
                            {       
                               //if it is a boolean
                               l1 = gen.NewLabel(); //creates new label for branching to expression2
                               l2 = gen.NewLabel(); //creates new label for branching past expression2
                               gen.BranchFalse(l1); //                      
                            }                               
                            else 
                                SemErr("object is not a boolean");
                         .)                        
   Expr<out reg,   
      out type>        (.            
                              if (type == obj.type   )  // this is expression 1   
                                  if (obj.level == 0)
                                      gen.StoreGlobal(reg, obj.adr, name); 
                                  else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                              gen.Branch(l2); // skip expression 2 if expression 1 was executed  
                         .)                        
    ':'                 (.        gen.Label(l1);                  .) //find expression 2                          
   Expr<out reg,  
       out type>        (.  
                              if (type == obj.type) // this is expression 2 
                                  if (obj.level == 0)
                                      gen.StoreGlobal(reg, obj.adr, name);
                                   else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);            
                        .)   
        ';'             (.    gen.Label(l2);     .)       //end of conditional statement   
     )                    
                              

  | '(' ')' ';'          (.
                            if (obj.kind == proc)
                               gen.Call(name);
                            else SemErr("object is not a procedure");
                         .)
  )
 
| "if"                   (. int l1, l2; l1 = 0; .)
  Expr<out reg,
       out type>         (.
                            if (type == boolean) {
                            //if its true, create label + branch
                               l1 = gen.NewLabel();
                               gen.BranchFalse(l1); 
                            }
                            else SemErr("boolean type expected");
                         .)
      Stat               (.
                            //checks statement
                            l2 = gen.NewLabel();                    
                            gen.Branch(l2);
                            gen.Label(l1);  
                         .)
      [ "else"
      Stat               
      ]                  (. gen.Label(l2); .)
 
| "while"                (.
                            int l1, l2;
                            l1 = gen.NewLabel();
                            gen.Label(l1); l2=0;
                         .)
  Expr<out reg,
       out type>         (.
                            if (type == boolean) {
                               l2 = gen.NewLabel();
                               gen.BranchFalse(l2);
                            }
                            else SemErr("boolean type expected");
                         .)
   Stat                  (.
                            gen.Branch(l1);
                            gen.Label(l2);
                         .)

/*--------------------------------------SWITCH-STATEMENT----------------------------------------*/   
| "switch"         	 (.  int l1, l2 ; l1 = 0; l2 = 0; int answer; answer = 0;  .)

   Ident<out name>   	 (.  l1 = gen.NewLabel();
			     l2 = gen.NewLabel();
			     obj = tab.Find(name);
	
			     if (obj.type == integer){
				gen.GetRegister();
 				answer = gen.GetRegister();

				 if (obj.kind == constant)			
				   gen.LoadConstant(answer, obj.constVal);

				 else if (obj.level == 0)
                                   gen.LoadGlobal(answer, obj.adr, name);
                                 else
                                  gen.LoadLocal(answer, tab.curLevel-obj.level, obj.adr, name);

				gen.ClearRegisters(); //resets it back to r5
			     }
			     else SemErr("integer type expected");	
			 .)
	":"		
			 
  {  "case"		 (.  gen.Label(l1); .)			

   Primary<out reg,
            out type> 	 (.
			    if(type == integer)
			    {
	   			
	    			gen.RelOp(Op.EQU, reg, answer);
                                l1 = gen.NewLabel();
				gen.BranchFalse(l1);
                             }
			    else SemErr("integer type expected");
			 .)

    ':'	 			
    {Stat}		


     "break;"            (.  gen.Branch(l2);  .)
			
 }
			  (.  gen.Label(l1); .)	
			  (.  gen.Label(l2); .)
				 

/*--------------------------------END-OF-SWITCH-STATEMENT-----------------------------------*/ 
 
/*-----------------------------------FOR-LOOP-----------------------------------------------*/

 | "for" 
	
   '('

    Stat                  (. int init; int execute; int next_loop; init = 0; execute= 0; next_loop = 0;
			     next_loop= gen.NewLabel();
			     gen.Branch(next_loop);
			     init = gen.NewLabel();
			     gen.Label(init);
			  .)

    Stat		  (.  gen.Label(next_loop);  .)  //increments or decrements the count
			

    Expr<out reg,
	out type>	  (.  if (type == boolean) {        //checks the condition
                                 execute= gen.NewLabel();
                                 gen.BranchFalse(execute);  //if false, execute code
                              }
                              else SemErr("boolean type expected");
			  .)	
   ')'

   ':'

   '{'			  (. tab.OpenSubScope();      .)
	{VarDecl}							
	Stat{Stat}
   '}'			  (. tab.CloseSubScope();
			     gen.Branch(init);		    //goes back to the next iteration of the loop
			     gen.Label(execute);  
                          .)	
				

/*-----------------------------------END-OF-FOR-LOOP-------------------------------------*/

| "read"
  Ident<out name> ';'    (.
                            obj = tab.Find(name);
                            if (obj.type == integer) {
                               gen.ReadInteger();
                               if (obj.level == 0)
                                  gen.StoreGlobal(0, obj.adr, name);
                               else gen.StoreLocal(0, tab.curLevel-obj.level, obj.adr, name);
                            }
                            else SemErr("integer type expected");
                         .)
 
| "write"                (. string text; .)
  (
    Expr<out reg,
         out type>       (.
                            switch (type) {
                               case integer: gen.WriteInteger(reg, false);
                                             break;
                               case boolean: gen.WriteBoolean(false);
                                             break;
                            }
                         .)
  | String<out text>     (. gen.WriteString(text); .)
  )
  ';'
 
| "writeln"
  // note - for strings use write with \n in text
  Expr<out reg,
       out type>           (.
                              switch (type) {
                                 case integer: gen.WriteInteger(reg, true);
                                               break;
                                 case boolean: gen.WriteBoolean(true);
                                               break;
                              }
                           .)
  ';'
 
| '{'                      (. tab.OpenSubScope(); .)
  { VarDecl | ArrayDecl}
  Stat { Stat }
  '}'                      (. tab.CloseSubScope(); .)
.
 
/*-------------------------------------------------------------------------------------------*/ 
Tastier                  (. string progName; .)
  = "program"
  Ident<out progName>    (. tab.OpenScope(); .)
  '{'
    { VarDecl }          // global variables
    { ArrayDecl } 
    { ConstantDecl}
    { ProcDecl<progName> }
                         (. tab.CloseScope(); .)
  '}'
.
 
/*-------------------------------------------------------------------------------------------*/
 
Term<out int reg,        // load value of Term into register
     out int type>       (. int typeR, regR; Op op; .)
  = Primary<out reg,
            out type>
  { MulOp<out op>
    Primary<out regR,
            out typeR>
                         (.
                            if (type == integer && typeR == integer)
                               gen.MulOp(op, reg, regR);
                            else SemErr("integer type expected");
                         .)
  }
.
 
/*-------------------------------------------------------------------------------------------*/
 
Type<out int type>
=                        (. type = undef; .)
 ( "int"                 (. type = integer; .)
 | "bool"                (. type = boolean; .)
 )
.
 
/*-------------------------------------------------------------------------------------------*/
 
VarDecl                  (. string name; int type; .)
= Type<out type>
  Ident<out name>        (. tab.NewObj(name, var, type, scalar); .)
  { ","
    Ident<out name>      (. tab.NewObj(name, var, type, scalar); .)
  } ";"
.

/*---------------------------ARRAYS-DECLARATION------------------------------------*/
ArrayDecl		 (. Obj obj; int temp; string name; int reg; int type; int reg2;.)
= 
Type<out type>
Ident<out name>		 (. tab.NewObj(name, var, type, array);     .)
			 (. obj = tab.Find(name);                .)

"["			 (.  reg2 = gen.GetRegister();       .)

Primary <out reg,
	out type>	 (. obj.value = Convert.ToInt32(t.val);  .)
			 
			 (. 
			   temp = 0;
			   gen.LoadConstant(reg2, temp);
			   while(temp != obj.value)
			   {
			     gen.StoreIndexedLocal(reg, tab.curLevel-obj.level, obj.adr, reg2, name); 
			     temp += 1;
                            } 
			  .)
					
"]"

";"
.

/*---------------------------CONSTANTS-DECLARATION---------------------------------*/

ConstantDecl			(. string name; int reg; Obj obj; int type;.)
= "const" 
 
  Ident<out name>		(. tab.NewObj(name, constant, integer, scalar); .) 
   "="				(. obj = tab.Find(name); .)
	Primary<out reg,
	out type>		(. obj.constVal = Convert.ToInt32(t.val); .)

    ";"
.
 

END Tastier.

